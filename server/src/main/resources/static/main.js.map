{"version":3,"sources":["./src/app/services/task_services/get.service.ts","./src/app/message-bar/message-bar.component.ts","./src/app/message-bar/message-bar.component.html","./src/environments/environment.ts","./src/app/services/task_services/delete.service.ts","./src/app/tasks/tasks.component.ts","./src/app/tasks/tasks.component.html","./src/app/services/user_services/login.service.ts","./src/app/models/form-panel-mode.ts","./src/app/store/store-actions.ts","./src/app/app.component.ts","./src/app/app.component.html","./src/app/services/task_services/save.service.ts","./src/app/app.module.ts","./src/app/services/user_services/registration.service.ts","./src/app/card-filter/card-filter.component.ts","./src/app/card-filter/card-filter.component.html","./src/app/store/store.reducer.ts","./src/app/card/card.component.ts","./src/app/card/card.component.html","./src/app/top-bar/top-bar.component.ts","./src/app/top-bar/top-bar.component.html","./src/app/services/task_services/update.service.ts","./src/app/services.settings.tools.ts","./src/app/services/user_services/token.service.ts","./src/app/models/task-list-status.ts","./src/app/form-panel/form-panel.component.ts","./src/app/form-panel/form-panel.component.html","./src/app/services/user_services/logOut.service.ts","./src/main.ts","./$_lazy_route_resource lazy namespace object"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["import { HttpClient } from \"@angular/common/http\";\r\nimport { Injectable } from \"@angular/core\";\r\nimport { Store } from \"@ngrx/store\";\r\nimport { Observable } from \"rxjs\";\r\nimport { catchError } from \"rxjs/operators\";\r\nimport { AppState } from \"../../store/AppState\";\r\nimport { ServicesSettingsAndTools } from \"../../services.settings.tools\";\r\nimport { changeTaskListStatus, createMultipleCards } from \"../../store/store-actions\";\r\nimport { Task } from \"../../models/task\";\r\nimport { TaskListStatus } from \"../../models/task-list-status\";\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class GetService {\r\n    token:string = \"\"\r\n\r\n    appState$:Observable<any>\r\n\r\n    constructor(private store: Store<{appState:AppState}>,\r\n      private http:HttpClient,\r\n      private serviceSettings:ServicesSettingsAndTools) {\r\n      this.appState$ = store.select('appState')\r\n      this.appState$.subscribe(app => this.token = app.token)\r\n    }\r\n\r\n    getAllTasks():void {\r\n        if(this.serviceSettings.tokenReceived()){\r\n            this.store.dispatch(changeTaskListStatus({taskListStatus:TaskListStatus.ALL}))\r\n            this.http.get<Task[]>(this.serviceSettings.tasksUrl + this.token, {observe:'response'})\r\n            .pipe(catchError(error => this.serviceSettings.handleHttpError(error)))\r\n            .subscribe(response => this.analyzeGetTasksResponse(response))\r\n        }\r\n    }\r\n\r\n    getDoneTasks():void {\r\n        if(this.serviceSettings.tokenReceived()){\r\n            this.store.dispatch(changeTaskListStatus({taskListStatus:TaskListStatus.DONE}))\r\n            this.http.get<Task[]>(this.serviceSettings.tasksDoneUrl + this.token, {observe:'response'})\r\n            .pipe(catchError(error => this.serviceSettings.handleHttpError(error)))\r\n            .subscribe(response => this.analyzeGetTasksResponse(response))\r\n        }\r\n    }\r\n\r\n    getTodoTasks():void {\r\n        if(this.serviceSettings.tokenReceived()){\r\n            this.store.dispatch(changeTaskListStatus({taskListStatus:TaskListStatus.TODO}))\r\n            this.http.get<Task[]>(this.serviceSettings.tasksTodoUrl + this.token, {observe:'response'})\r\n            .pipe(catchError(error => this.serviceSettings.handleHttpError(error)))\r\n            .subscribe(response => this.analyzeGetTasksResponse(response))\r\n        }\r\n    }\r\n\r\n    private analyzeGetTasksResponse(response:any):void{\r\n        if(response != null){\r\n            var status = response.status\r\n            if(response.body != null){  \r\n                if(status==200){\r\n                    this.store.dispatch(createMultipleCards({cards:this.serviceSettings.convertTasks(response.body)}))\r\n                    this.addMessage(\"Tasks reloaded\",true,0)\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n    private addMessage(message:string, status:boolean, statusCode:number): void {\r\n        this.serviceSettings.addServerManagementMessage(message, status, statusCode)\r\n    }\r\n}","import { Component, ElementRef, OnInit } from '@angular/core';\nimport { Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { AppState } from '../store/AppState';\nimport { ServerMessage } from '../models/server-message';\n\n@Component({\n  selector: 'app-message-bar',\n  templateUrl: './message-bar.component.html',\n  styleUrls: ['./message-bar.component.css']\n})\nexport class MessageBarComponent implements OnInit {\n\n  appState$:Observable<any>\n\n  messages:ServerMessage[] = []\n\n  constructor(private store: Store<{appState:AppState}>, private element:ElementRef) {\n    this.appState$ = store.select('appState')\n    this.appState$.subscribe(app => this.updateMessage(app.serverMessages))\n  }\n\n  private updateMessage(serverMessages:ServerMessage[]){\n    this.messages = serverMessages\n    this.scrollToBottom()\n  }\n\n  private scrollToBottom(){\n    const scrollPane: any = this.element.nativeElement.querySelector('#list-to-scroll')\n    if(scrollPane) {\n      setTimeout(()=> scrollPane.scrollTop = scrollPane.scrollHeight)\n    }\n  }\n\n  ngOnInit(): void {\n  }\n}\n","<div class=\"card m-2 shadow\" style=\"height: 100px; overflow-y: auto;\" id=\"list-to-scroll\">\n    <div class=\"card\">\n        <ul class=\"list-group list-group-flush\" *ngFor=\"let serverMessage of messages\">\n            <li class=\"list-group-item\" [ngClass]=\"{'text-success':serverMessage.messageStatus, 'text-danger': !serverMessage.messageStatus}\">\n            <span *ngIf=\"serverMessage.messageStatusCode != 0\">{{serverMessage.messageStatusCode}}</span><span>&nbsp;&nbsp;</span>\n            <span>{{serverMessage.message}}</span></li>\n        </ul>\n    </div>\n</div>\n","// This file can be replaced during build by using the `fileReplacements` array.\r\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\r\n// The list of file replacements can be found in `angular.json`.\r\n\r\nexport const environment = {\r\n  production: false\r\n};\r\n\r\n/*\r\n * For easier debugging in development mode, you can import the following file\r\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\r\n *\r\n * This import should be commented out in production mode because it will have a negative impact\r\n * on performance if an error is thrown.\r\n */\r\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\r\n","import { HttpClient, HttpResponse } from \"@angular/common/http\"\r\nimport { Injectable } from \"@angular/core\"\r\nimport { Store } from \"@ngrx/store\"\r\nimport { Observable } from \"rxjs\"\r\nimport { AppState } from \"../../store/AppState\"\r\nimport { StringDto } from \"../../models/string-dto\"\r\nimport { Task } from \"../../models/task\"\r\nimport { ServicesSettingsAndTools } from \"../../services.settings.tools\"\r\nimport { deleteCard } from \"../../store/store-actions\"\r\nimport { Card } from \"../../models/card\"\r\nimport { catchError } from \"rxjs/operators\"\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class DeleteService {\r\n\r\n    token:string = \"\"\r\n    userLogged:boolean = false\r\n\r\n    appState$:Observable<any>\r\n\r\n    constructor(private store: Store<{appState:AppState}>,\r\n      private http:HttpClient,\r\n      private serviceSettings:ServicesSettingsAndTools) {\r\n        this.appState$ = store.select('appState')\r\n        this.appState$.subscribe(app => this.setState(app))\r\n    }\r\n\r\n    private setState(state:AppState):void {\r\n        this.token = state.token\r\n        this.userLogged = this.userLogged\r\n    }\r\n\r\n    deleteTask(card: Card): void {\r\n      if(this.serviceSettings.tokenReceived()){\r\n        const id = card.id;\r\n        const url = `${this.serviceSettings.tasksUrl + this.token}/${id}`\r\n        this.http.delete<StringDto>(url, {observe:'response'})\r\n        .pipe(catchError(error => this.serviceSettings.handleHttpError(error)))\r\n        .subscribe(response => this.analyzeDeleteResponse(card,response))\r\n      }\r\n    }\r\n    \r\n    private analyzeDeleteResponse(card:Card, response:any){\r\n      if(response != null){\r\n        var status = response.status\r\n        if(response.body != null){\r\n          if(status==202){\r\n            this.store.dispatch(deleteCard({card}))\r\n            this.addMessage(response.body.value, true, response.status)\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    private addMessage(message:string, messageStatus:boolean, messageStatusCode:number):void {\r\n      this.serviceSettings.addServerManagementMessage(message, messageStatus, messageStatusCode)\r\n    }\r\n}","import { ThrowStmt } from '@angular/compiler';\r\nimport { Component, OnInit } from '@angular/core';\r\nimport { Store } from '@ngrx/store';\r\nimport { Observable } from 'rxjs';\r\nimport { StringDto } from '../models/string-dto';\r\nimport { Task } from '../models/task';\r\nimport { AppState } from '../store/AppState';\r\nimport { createCard } from '../store/store-actions';\r\nimport { Card } from '../models/card';\r\nimport { SaveService } from '../services/task_services/save.service';\r\n\r\n@Component({\r\n  selector: 'app-tasks',\r\n  templateUrl: './tasks.component.html',\r\n  styleUrls: ['./tasks.component.css']\r\n})\r\nexport class TasksComponent implements OnInit {\r\n\r\n  cards:Card[] = []\r\n\r\n  appState$:Observable<any>\r\n\r\n  maxId:number = 0\r\n\r\n  constructor(private store: Store<{appState:AppState}>, private saveService:SaveService) {\r\n      this.appState$ = store.select('appState')\r\n      this.appState$.subscribe(app => this.cards=app.cards)\r\n    }\r\n\r\n  ngOnInit(): void {}\r\n\r\n  add(): void {\r\n    var card:Card = {id:0,taskName:\"\", description:\"\", done:false, message:\"\", messageShow:false, editMode:true, folded:false}\r\n    this.saveService.saveTask(card)\r\n  }\r\n}\r\n","<div *ngFor=\"let card of cards\">\r\n    <app-card [cardInput]=\"card\"></app-card>\r\n</div>\r\n<button mat-icon-button (click)=add()>\r\n    <mat-icon>add</mat-icon>\r\n</button>\r\n","import { HttpClient, HttpErrorResponse, HttpResponse } from \"@angular/common/http\"\r\nimport { Injectable } from \"@angular/core\"\r\nimport { Store } from \"@ngrx/store\"\r\nimport { Observable, of, throwError } from \"rxjs\"\r\nimport { AppState } from \"../../store/AppState\"\r\nimport { addServerMessage, createMultipleCards, setFormPanelMode, setToken, setTopBarMessage, setUserLoggedToTrue } from \"../../store/store-actions\"\r\nimport { StringDto } from \"../../models/string-dto\"\r\nimport { Task } from \"../../models/task\"\r\nimport { ServicesSettingsAndTools } from \"../../services.settings.tools\"\r\nimport { UserCredentials } from \"../../models/user-credentials\"\r\nimport { catchError } from \"rxjs/operators\"\r\nimport { FormPanelMode } from \"../../models/form-panel-mode\"\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class LoginService {\r\n  private token:string = \"\"\r\n  private userLogged:boolean = false\r\n\r\n  private appState$:Observable<any>\r\n\r\n  constructor(private store: Store<{appState:AppState}>,\r\n    private http:HttpClient,\r\n    private serviceSettings:ServicesSettingsAndTools) {\r\n    this.appState$ = store.select('appState')\r\n    this.appState$.subscribe(app => this.setState(app))\r\n  }\r\n\r\n  private setState(state:AppState):void {\r\n      this.token = state.token\r\n      this.userLogged = this.userLogged\r\n  }\r\n    \r\n  loginUser(userCredentials: UserCredentials):void {\r\n    if(this.serviceSettings.tokenReceived()){\r\n      if(!userCredentials.userEmail || !userCredentials.userPassword){\r\n        this.addMessage('Email and password can\\'t be blank.',false,0)\r\n      }else{\r\n        this.switchOffFormPanel()\r\n        this.communicateWithServer(userCredentials);\r\n      }\r\n    } else {\r\n      this.serviceSettings.addServerManagementMessage(this.serviceSettings.tokenNotFoundMessage,false,0)\r\n    }\r\n  }\r\n\r\n  private switchOffFormPanel(){\r\n    this.store.dispatch(setFormPanelMode({mode:FormPanelMode.NOT_VISIBLE}))\r\n  }\r\n\r\n  private communicateWithServer(userCredentials:UserCredentials){\r\n    this.http.post<StringDto>(\r\n      this.serviceSettings.loginUrl + '/' + this.token, userCredentials, {observe: 'response'})\r\n      .pipe(catchError(error => this.serviceSettings.handleHttpError(error)))\r\n      .subscribe(\r\n        response => { \r\n          this.analyzeLoginResponse(response, userCredentials)\r\n        })\r\n  }\r\n\r\n  private analyzeLoginResponse(response:any, userCredentials:UserCredentials):void {\r\n    if(response != null){\r\n      var status = response.status\r\n      if(response.body != null){  \r\n        if(status==202){\r\n          var message = response.body.value\r\n          this.executeLoginOperations(message, userCredentials)\r\n        }      \r\n      }\r\n    }\r\n  }\r\n\r\n  private executeLoginOperations(message: string, userCredentials:UserCredentials) {\r\n    var topBarMessage = \"Logged as \" + userCredentials.userEmail\r\n    this.store.dispatch(setTopBarMessage({message: topBarMessage}))\r\n    this.store.dispatch(setUserLoggedToTrue())\r\n    this.addMessage(\"User logged in.\",true,0)\r\n    this.reloadTasks()\r\n  }\r\n\r\n  private reloadTasks():void {\r\n    this.http.get<Task[]>(this.serviceSettings.tasksUrl + this.token, {observe:'response'})\r\n    .pipe(catchError(error => this.serviceSettings.handleHttpError(error)))\r\n    .subscribe(response => this.analyzeGetTasksResponse(response))\r\n  }\r\n\r\n  private analyzeGetTasksResponse(response:any):void{\r\n    if(response != null){\r\n      var status = response.status\r\n      if(response.body != null){  \r\n        if(status==200){\r\n          this.store.dispatch(createMultipleCards({cards:this.serviceSettings.convertTasks(response.body)}))\r\n          this.addMessage(\"Tasks reloaded\",true,0)\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  private addMessage(message:string, status:boolean, statusCode:number): void {\r\n    this.serviceSettings.addServerManagementMessage(message, status, statusCode)\r\n  }\r\n}","export enum FormPanelMode {\r\n    LOG_IN, SIGN_IN, NOT_VISIBLE\r\n}","import { createAction, props } from '@ngrx/store'\r\nimport { Card } from '../models/card'\r\nimport { FormPanelMode } from '../models/form-panel-mode'\r\nimport { ServerMessage } from '../models/server-message'\r\nimport { TaskListStatus } from '../models/task-list-status'\r\n\r\n//TopBar component actions\r\nexport const setTopBarMessage = createAction(\r\n    \"[TopBar Component] Set message.\",\r\n    props<{message:string}>())\r\n\r\n//FormPanel component actions\r\nexport const setFormPanelMode = createAction(\r\n    \"[FormPanel Component] Set mode.\",\r\n    props<{mode:FormPanelMode}>())\r\n\r\n//ServerManagement actions\r\nexport const setToken = createAction(\"[ServerManagement] Set token.\",\r\n    props<{token:string}>())\r\nexport const setUserLoggedToTrue = createAction(\"[ServerManagement] Set user logged to true.\")\r\nexport const setUserLoggedToFalse = createAction(\"[ServerManagement] Set user logged to false.\")\r\nexport const addServerMessage = createAction(\"[ServerManagement] Add message.\",\r\n    props<{message:ServerMessage}>())\r\n\r\nexport const changeTaskListStatus = createAction(\r\n    \"[Task Component] Change task list status.\",\r\n    props<{taskListStatus:TaskListStatus}>())\r\n\r\nexport const createMultipleCards = createAction(\r\n    '[Tasks Component] Create multiple cards',\r\n    props<{cards:Card[]}>())\r\n\r\nexport const createCard = createAction(\r\n    '[Tasks Component] CreateCard',\r\n    props<{card:Card}>())\r\n\r\nexport const updateCard = createAction(\r\n    '[Tasks Component] UpdateCard',\r\n    props<{card:Card}>())\r\nexport const deleteCard = createAction(\r\n    '[Tasks Component] DeleteCard',\r\n    props<{card:Card}>())\r\n\r\n\r\n","import { Component } from '@angular/core';\r\nimport { TokenService } from './services/user_services/token.service';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.css']\r\n})\r\nexport class AppComponent {\r\n  title = 'ToDoApp';\r\n\r\n  constructor(private tokenService:TokenService) {\r\n    tokenService.getToken()\r\n  } \r\n}\r\n","<div id=\"basicContainer\">\r\n    <div class=\"card\">\r\n        <div class=\"card-body\">\r\n            <app-top-bar></app-top-bar>\r\n            <app-form-panel></app-form-panel>\r\n            <app-card-filter></app-card-filter>\r\n            <app-message-bar></app-message-bar>\r\n            <app-tasks></app-tasks>\r\n        </div>\r\n    </div>\r\n</div>","import { HttpClient, HttpResponse } from \"@angular/common/http\"\r\nimport { Injectable } from \"@angular/core\"\r\nimport { Store } from \"@ngrx/store\"\r\nimport { Observable } from \"rxjs\"\r\nimport { AppState } from \"../../store/AppState\"\r\nimport { StringDto } from \"../../models/string-dto\"\r\nimport { Task } from \"../../models/task\"\r\nimport { ServicesSettingsAndTools } from \"../../services.settings.tools\"\r\nimport { Card } from \"../../models/card\"\r\nimport { createCard } from \"../../store/store-actions\"\r\nimport { catchError } from \"rxjs/operators\"\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class SaveService {\r\n\r\n    token:string = \"\"\r\n    userLogged:boolean = false\r\n\r\n    appState$:Observable<any>\r\n\r\n    constructor(private store: Store<{appState:AppState}>,\r\n      private http:HttpClient,\r\n      private serviceSettings:ServicesSettingsAndTools) {\r\n        this.appState$ = store.select('appState')\r\n        this.appState$.subscribe(app => this.setState(app))\r\n    }\r\n\r\n    private setState(state:AppState):void {\r\n      this.token = state.token\r\n      this.userLogged = this.userLogged\r\n    }\r\n//202\r\n    saveTask(card:Card): void {\r\n      if(this.serviceSettings.tokenReceived()){\r\n        this.http.post<StringDto>(this.serviceSettings.tasksUrl + this.token,\r\n           this.serviceSettings.cardToTaskConverter(card), {observe:'response'})\r\n           .pipe(catchError(error => this.serviceSettings.handleHttpError(error)))\r\n        .subscribe(response => this.analyzeSaveTaskResponse(card,response))\r\n      } else {\r\n        this.addMessage(this.serviceSettings.tokenNotFoundMessage,false,0)\r\n      }\r\n    }\r\n    \r\n    private analyzeSaveTaskResponse(card:Card,response:any):void {\r\n      if(response != null){\r\n        var status = response.status\r\n        if(response.body != null){\r\n          if(status==200){\r\n            var task:Task= response.body\r\n            var receivedCard:Card = this.serviceSettings.taskToCardConverter(task)\r\n            this.store.dispatch(createCard({card:receivedCard}))\r\n            if(response.body != null && response.status != null){\r\n              this.addMessage(response.body.value, true, response.status)\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    private addMessage(message:string, messageStatus:boolean, messageStatusCode:number):void {\r\n      this.serviceSettings.addServerManagementMessage(message, messageStatus, messageStatusCode)\r\n    }\r\n}","import { BrowserModule } from '@angular/platform-browser';\r\nimport { NgModule } from '@angular/core';\r\n\r\nimport { AppComponent } from './app.component';\r\nimport { CardComponent } from './card/card.component';\r\nimport { TasksComponent } from './tasks/tasks.component';\r\n\r\nimport { FormsModule } from '@angular/forms';\r\nimport { HttpClient, HttpClientModule } from '@angular/common/http';\r\nimport { NoopAnimationsModule } from '@angular/platform-browser/animations';\r\nimport { StoreModule } from '@ngrx/store';\r\nimport { appReducer } from './store/store.reducer';\r\nimport { StoreDevtoolsModule } from '@ngrx/store-devtools';\r\nimport { environment } from '../environments/environment'; \r\nimport {MatButtonModule} from '@angular/material/button';\r\nimport {MatSlideToggleModule} from '@angular/material/slide-toggle'; \r\nimport {MatIconModule} from '@angular/material/icon';\r\nimport { CardFilterComponent } from './card-filter/card-filter.component';\r\nimport { TopBarComponent } from './top-bar/top-bar.component';\r\nimport { FormPanelComponent } from './form-panel/form-panel.component';\r\nimport { EffectsModule } from '@ngrx/effects';\r\nimport { MessageBarComponent } from './message-bar/message-bar.component';\r\nimport { NgbModule } from '@ng-bootstrap/ng-bootstrap';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    AppComponent,\r\n    CardComponent,\r\n    TasksComponent,\r\n    CardFilterComponent,\r\n    TopBarComponent,\r\n    FormPanelComponent,\r\n    MessageBarComponent\r\n  ],\r\n  imports: [\r\n    BrowserModule,\r\n    FormsModule,\r\n    HttpClientModule,\r\n    NoopAnimationsModule,\r\n    MatButtonModule,\r\n    MatSlideToggleModule,\r\n    MatIconModule,\r\n    StoreModule.forRoot({appState: appReducer}),\r\n    StoreDevtoolsModule.instrument(),\r\n    NgbModule],\r\n  providers: [],\r\n  bootstrap: [AppComponent]\r\n})\r\nexport class AppModule { }\r\n","import { HttpClient, HttpResponse } from \"@angular/common/http\"\r\nimport { Injectable } from \"@angular/core\"\r\nimport { Store } from \"@ngrx/store\"\r\nimport { Observable } from \"rxjs\"\r\nimport { catchError } from \"rxjs/operators\"\r\nimport { AppState } from \"../../store/AppState\"\r\nimport { ServerMessage } from \"../../models/server-message\"\r\nimport { ServicesSettingsAndTools } from \"../../services.settings.tools\"\r\nimport { addServerMessage, setTopBarMessage } from \"../../store/store-actions\"\r\nimport { StringDto } from \"../../models/string-dto\"\r\nimport { UserCredentials } from \"../../models/user-credentials\"\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class RegistrationService {\r\n    \r\n    token:string = \"\"\r\n    userLogged:boolean = false\r\n\r\n    appState$:Observable<any>\r\n\r\n    constructor(private store: Store<{appState:AppState}>,\r\n      private http:HttpClient,\r\n      private serviceSettings:ServicesSettingsAndTools) {\r\n        this.appState$ = store.select('appState')\r\n        this.appState$.subscribe(app => this.setState(app))\r\n    }\r\n\r\n    private setState(state:AppState):void {\r\n        this.token = state.token\r\n        this.userLogged = this.userLogged\r\n    }\r\n\r\n    registerUser(userCredentials: UserCredentials):void {\r\n        if(this.serviceSettings.tokenReceived()){\r\n          if(!userCredentials.userEmail || !userCredentials.userPassword){\r\n            this.addMessage('Email and password can\\'t be blank.',false,0)\r\n          }else{\r\n            this.addMessage(\"Registering user...\",true,0)\r\n            this.http.post<StringDto>(\r\n              this.serviceSettings.registerUrl + this.token, userCredentials, {observe: 'response'})\r\n              .pipe(catchError(error => this.serviceSettings.handleHttpError(error)))\r\n              .subscribe(\r\n              response => { \r\n                this.analyzeRegisterResponse(response)\r\n              }\r\n            )\r\n          }\r\n        } else {\r\n          this.addMessage(this.serviceSettings.tokenNotFoundMessage,false,0)\r\n        }\r\n      }\r\n    \r\n      private analyzeRegisterResponse(response:any):void {\r\n        if(response != null){\r\n          var status = response.status\r\n          if(response.body != null){\r\n            var message:string = response.body.value\r\n            if(status==202){\r\n              this.addMessage(message,true,status)\r\n            } \r\n          }\r\n        }\r\n      }\r\n\r\n    private addMessage(message:string, status:boolean, statusCode:number){\r\n        this.serviceSettings.addServerManagementMessage(message, status, statusCode)\r\n    }\r\n}","import { Component, OnInit } from '@angular/core';\nimport { Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { AppState } from '../store/AppState';\nimport { TaskListStatus } from '../models/task-list-status';\nimport { GetService } from '../services/task_services/get.service';\n\n@Component({\n  selector: 'app-card-filter',\n  templateUrl: './card-filter.component.html',\n  styleUrls: ['./card-filter.component.css']\n})\nexport class CardFilterComponent implements OnInit {\n\n  taskListStatus:TaskListStatus = TaskListStatus.ALL\n\n  search:string = \"\"\n\n  appState$:Observable<any>\n\n  constructor(private store: Store<{appState:AppState}>,\n    private getService:GetService) { \n      this.appState$ = store.select('appState')\n      this.appState$.subscribe(app => this.setStatus(app.taskListStatus))\n    }\n\n  ngOnInit(): void {\n  }\n\n  private setStatus(taskListStatus:TaskListStatus){\n    if(taskListStatus == TaskListStatus.ALL){\n      this.model = {all:true, todo:false, done:false}\n    }\n    if(taskListStatus == TaskListStatus.TODO){\n      this.model = {all:false, todo:true, done:false}\n    }\n    if(taskListStatus == TaskListStatus.DONE){\n      this.model = {all:false, todo:false, done:true}\n    }\n  }\n\n  model = {\n    all: true,\n    todo: false,\n    done: false,\n  }\n\n  all():void {\n    this.getService.getAllTasks()\n  }\n\n  toDo():void {\n    this.getService.getTodoTasks()\n  }\n\n  done():void {\n    this.getService.getDoneTasks()\n  }\n}\n","<div class=\"card m-2 shadow\">\n    <div class=\"card-body\">\n        <div class=\"btn-group btn-group-toggle\">\n            <label class=\"btn-outline-primary\" ngbButtonLabel>\n                <input type=\"checkbox\" ngbButton (click)=\"all()\" [(ngModel)]=\"model.all\">All\n            </label>\n            <label class=\"btn-outline-primary\" ngbButtonLabel>\n                <input type=\"checkbox\" ngbButton (click)=\"toDo()\" [(ngModel)]=\"model.todo\">To do\n            </label>\n            <label class=\"btn-outline-primary\" ngbButtonLabel>\n                <input type=\"checkbox\" ngbButton (click)=\"done()\" [(ngModel)]=\"model.done\">Done\n            </label>\n        </div>\n    </div>\n</div>","import { Action, createReducer, createReducerFactory, on, State, Store } from '@ngrx/store'\r\nimport { Task } from '../models/task'\r\nimport { AppState } from './AppState'\r\nimport { createCard,\r\n     updateCard,\r\n      deleteCard,\r\n         setTopBarMessage,\r\nsetFormPanelMode,\r\nsetToken,\r\nsetUserLoggedToFalse,\r\nsetUserLoggedToTrue,\r\naddServerMessage,\r\ncreateMultipleCards,\r\nchangeTaskListStatus\r\n} from './store-actions'\r\nimport { Card } from '../models/card'\r\nimport { FormPanelMode } from '../models/form-panel-mode'\r\nimport { ServerMessage } from '../models/server-message'\r\nimport { TaskListStatus } from '../models/task-list-status'\r\n\r\nexport const initialState:AppState = {\r\n    topBarMessage:\"ToDo App\",\r\n    formPanelMode:FormPanelMode.NOT_VISIBLE,\r\n    token:\"\",\r\n    userLogged:false,\r\n    serverMessages:[],\r\n    taskListStatus: TaskListStatus.ALL,\r\n    cards:[]}\r\n\r\nconst _appReducer = createReducer(\r\n    initialState,\r\n    //TopBar actions\r\n    on(setTopBarMessage, (state,{message}) => ({...state, topBarMessage:message})),\r\n    on(setFormPanelMode, (state,{mode}) => ({...state, formPanelMode:mode})),\r\n    on(setToken, (state,{token}) => ({...state, token:token})),\r\n    on(setUserLoggedToTrue, state => ({...state, userLogged:true})),\r\n    on(setUserLoggedToFalse, state => ({...state, userLogged:false})),\r\n    on(addServerMessage, (state,{message}) => ({...state, serverMessages:messageAdder(state,message)})),\r\n    on(changeTaskListStatus, (state,{taskListStatus}) => ({...state, taskListStatus:taskListStatus})),\r\n\r\n    on(createMultipleCards, (state, {cards}) => ({...state, cards:cards})),\r\n    on(createCard, (state, {card}) => ({...state, cards:cardCreator(state,card)})),\r\n    on(updateCard, (state, {card}) => ({...state, cards:cardUpdater(state,card)})),\r\n    on(deleteCard, (state, {card\r\n    }) => ({...state, cards:state.cards.filter(c => c.id !== card.id)}))\r\n)\r\n\r\nexport function appReducer(state: AppState | undefined, action: Action){\r\n    return _appReducer(state,action)\r\n}\r\n\r\nvar messageAdder = function(state:AppState, message:ServerMessage):ServerMessage[] {\r\n    var messages = state.serverMessages.slice()\r\n    messages.push(message)\r\n    return messages\r\n}\r\n\r\nvar cardCreator = function(state:AppState, card:Card):Card[] {\r\n    var cards = state.cards.slice()\r\n    cards.push(card)\r\n    return cards\r\n}\r\n\r\nvar cardUpdater = function(state:AppState, card:Card):Card[] {\r\n    var cards = state.cards.slice()\r\n    for(var i=0; i<cards.length; i++){\r\n        if(cards[i].id == card.id){\r\n            cards[i]=card\r\n        }\r\n    }\r\n    return cards\r\n}\r\n","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\r\nimport { Event } from '@angular/router';\r\nimport { Store } from '@ngrx/store';\r\nimport { takeLast } from 'rxjs/operators';\r\nimport { AppState } from '../store/AppState';\r\nimport { Card } from '../models/card';\r\nimport { createCard,\r\n  updateCard, deleteCard } from '../store/store-actions';\r\nimport { Task } from '../models/task';\r\nimport { DeleteService } from '../services/task_services/delete.service';\r\nimport { UpdateService } from '../services/task_services/update.service';\r\n\r\n@Component({\r\n  selector: 'app-card',\r\n  templateUrl: './card.component.html',\r\n  styleUrls: ['./card.component.css']\r\n})\r\nexport class CardComponent implements OnInit { \r\n\r\n  @Input() cardInput!:Card\r\n\r\n  card!:Card\r\n\r\n  constructor(private store: Store<{appState:AppState}>,\r\n    private updateService:UpdateService,\r\n    private deleteService:DeleteService) { \r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.card = Object.assign({},this.cardInput)\r\n  }\r\n\r\n  save(): void {\r\n    if(this.saveAllowed()){\r\n      this.card.messageShow = false\r\n      this.card.message = \"\"\r\n      this.card.editMode = false\r\n      this.updateStore()\r\n    } else {\r\n      this.card.messageShow = true\r\n      this.card.message = \"Task name can't be blank.\"\r\n      this.updateStore()\r\n    }\r\n  }\r\n\r\n  edit():void {\r\n    this.card.editMode = true\r\n    this.updateStore()\r\n  }\r\n\r\n  fold(): void {\r\n    this.card.folded = true\r\n    this.updateStore()\r\n  }\r\n\r\n  unfold(): void {\r\n    this.card.folded = false\r\n    this.updateStore()\r\n  }\r\n\r\n  update():void {\r\n    if(this.saveAllowed()){\r\n      this.card.messageShow = false\r\n      this.card.message = \"\"\r\n      this.updateStore()\r\n    } else {\r\n      this.card.messageShow = true\r\n      this.card.message = \"Task name can't be blank.\"\r\n      this.updateStore()\r\n    }\r\n  }\r\n\r\n  private saveAllowed():boolean {\r\n    if(this.card.taskName.length==0){\r\n      return false\r\n    }else {\r\n      return true\r\n    }\r\n  }\r\n\r\n  private updateStore(){\r\n    this.updateService.updateTask(this.card)\r\n  }\r\n\r\n  delete(){\r\n    this.deleteService.deleteTask(this.cardInput)\r\n  }\r\n\r\n  updater(){\r\n    this.update()\r\n  }\r\n}\r\n","<div class=\"card m-2 shadow\">\r\n    <div class=\"card-body\">\r\n        <div style=\"float: right;\">\r\n            <button mat-icon-button *ngIf=\"!card.folded\" (click)=\"fold()\"><mat-icon>expand_less</mat-icon></button>\r\n            <button mat-icon-button *ngIf=\"card.folded\" (click)=\"unfold()\"><mat-icon>expand_more</mat-icon></button>\r\n            <input type=\"checkbox\" [checked]=\"card.done\" (change)=\"card.done = !card.done; updater()\"> Done\r\n            <button mat-icon-button (click)=\"delete()\"><mat-icon>close</mat-icon></button>\r\n        </div>\r\n        <div *ngIf=\"card.folded\">\r\n            <h2 class=\"card-title\">{{card.taskName}}</h2>\r\n        </div>\r\n        <div *ngIf=\"!card.folded\">\r\n            <div *ngIf=\"!card.editMode\">\r\n                <h1 class=\"card-title\">{{card.taskName}}</h1>\r\n                <h2 class=\"card-text\">{{card.description}}</h2>\r\n                <button *ngIf=\"!card.editMode\" (click)=\"edit()\" class=\"btn btn-primary\">Edit</button>\r\n            </div>\r\n            <div *ngIf=\"card.editMode\">\r\n                <div class=\"mb-3\">\r\n                    <label for=\"taskname\" class=\"form-label\">Task name</label>\r\n                    <input class=\"form-control\" id=\"taskname\" aria-describedby=\"emailHelp\" [(ngModel)]=\"card.taskName\">\r\n                </div>\r\n                <div class=\"mb-3\">\r\n                    <label for=\"taskdescription\" class=\"form-label\">Task description</label>\r\n                    <input class=\"form-control\" id=\"taskdescription\" [(ngModel)]=\"card.description\">\r\n                </div>\r\n                <button *ngIf=\"card.editMode\" (click)=\"save()\" class=\"btn btn-primary mb-3\">Save</button>\r\n            </div>\r\n        </div>\r\n        <h2 class=\"text-danger\" *ngIf=\"card.messageShow\">{{card.message}}</h2>\r\n    </div>\r\n</div>","import { Component, OnInit } from '@angular/core';\nimport { Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { AppState } from '../store/AppState';\nimport { FormPanelMode } from '../models/form-panel-mode';\nimport { setFormPanelMode } from '../store/store-actions';\nimport { LogOutService } from '../services/user_services/logOut.service';\n\n@Component({\n  selector: 'app-top-bar',\n  templateUrl: './top-bar.component.html',\n  styleUrls: ['./top-bar.component.css']\n})\nexport class TopBarComponent implements OnInit {\n\n  logInSignInVisible!:boolean\n  logOutVisible!:boolean\n  barMessage:string = \"\"\n\n  appState$:Observable<any>\n\n  constructor(private store:Store<{appState:AppState}>,\n    private logOutService:LogOutService) {\n    this.appState$ = store.select('appState')\n    this.appState$.subscribe(app => this.setStates(app))\n  }\n\n  setStates(appState:AppState){\n    this.barMessage = appState.topBarMessage\n    var userLogged = appState.userLogged\n    if(userLogged){\n      this.logOutVisible=true\n      this.logInSignInVisible=false\n    }else{\n      this.logOutVisible=false\n      this.logInSignInVisible=true\n    }\n  }\n\n  ngOnInit(): void {\n  }\n\n  logIn(): void {\n    this.store.dispatch(setFormPanelMode({mode:FormPanelMode.LOG_IN}))\n  }\n\n  signUp(): void {\n    this.store.dispatch(setFormPanelMode({mode:FormPanelMode.SIGN_IN}))\n  }\n\n  logOut(): void {\n    this.logOutService.logoutUser()\n  }\n}\n","<div class=\"card m-2 shadow\" style=\"height:70px\">\n    <div class=\"card-body\">\n        <h2 class=\"card-title\">{{barMessage}}</h2>\n        <div style=\"float:right; position:relative; top:-60px\">\n            <button *ngIf=\"logInSignInVisible\" (click)=\"logIn()\" class=\"btn btn-primary m-2\">Log In</button>\n            <button *ngIf=\"logInSignInVisible\" (click)=\"signUp()\" class=\"btn btn-primary m-2\">Sign Up</button>\n            <button *ngIf=\"logOutVisible\" (click)=\"logOut()\" class=\"btn btn-primary m-2\">Log Out</button>\n        </div>\n    </div>\n</div>\n","import { HttpClient, HttpResponse } from \"@angular/common/http\"\r\nimport { Injectable } from \"@angular/core\"\r\nimport { Store } from \"@ngrx/store\"\r\nimport { Observable } from \"rxjs\"\r\nimport { catchError } from \"rxjs/operators\"\r\nimport { AppState } from \"../../store/AppState\"\r\nimport { Card } from \"../../models/card\"\r\nimport { ServicesSettingsAndTools } from \"../../services.settings.tools\"\r\nimport { updateCard } from \"../../store/store-actions\"\r\nimport { StringDto } from \"../../models/string-dto\"\r\nimport { Task } from \"../../models/task\"\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class UpdateService {\r\n\r\n    token:string = \"\"\r\n    userLogged:boolean = false\r\n\r\n    appState$:Observable<any>\r\n\r\n    constructor(private store: Store<{appState:AppState}>,\r\n      private http:HttpClient,\r\n      private serviceSettings:ServicesSettingsAndTools) {\r\n        this.appState$ = store.select('appState')\r\n        this.appState$.subscribe(app => this.setState(app))\r\n    }\r\n\r\n    private setState(state:AppState):void {\r\n        this.token = state.token\r\n        this.userLogged = this.userLogged\r\n    }\r\n\r\n    updateTask(card: Card): void {\r\n      console.log(card)\r\n      if(this.serviceSettings.tokenReceived()){\r\n        this.http.put<StringDto>(this.serviceSettings.tasksUrl + this.token, \r\n          this.serviceSettings.cardToTaskConverter(card), {observe:'response'})\r\n          .pipe(catchError(error => this.serviceSettings.handleHttpError(error)))\r\n          .subscribe(response => this.analyzeUpdateResponse(card,response))\r\n      } else {\r\n        this.addMessage(this.serviceSettings.tokenNotFoundMessage,false,0)\r\n      }\r\n    }\r\n\r\n    private analyzeUpdateResponse(card:Card, response:any):void {\r\n      if(response != null){\r\n        var status = response.status\r\n        if(response.body != null){  \r\n          if(status==202){\r\n            this.store.dispatch(updateCard({card}))\r\n            if(response.body != null && response.status != null){\r\n              this.addMessage(response.body.value, true, response.status)\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    private addMessage(message:string, messageStatus:boolean, messageStatusCode:number):void {\r\n      this.serviceSettings.addServerManagementMessage(message, messageStatus, messageStatusCode)\r\n    }\r\n}","import { HttpErrorResponse, HttpHeaders, HttpResponse } from \"@angular/common/http\"\r\nimport { Injectable } from \"@angular/core\"\r\nimport { Store } from \"@ngrx/store\"\r\nimport { Observable } from \"rxjs\"\r\nimport { AppState } from \"./store/AppState\"\r\nimport { Card } from \"./models/card\"\r\nimport { ServerMessage } from \"./models/server-message\"\r\nimport { addServerMessage } from \"./store/store-actions\"\r\nimport { StringDto } from \"./models/string-dto\"\r\nimport { Task } from \"./models/task\"\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ServicesSettingsAndTools {\r\n    rootUrl = 'https://morning-coast-72770.herokuapp.com/toDo'\r\n    tokenUrl = this.rootUrl + '/token'\r\n    loginUrl = this.rootUrl + '/login'\r\n    registerUrl = this.rootUrl + '/register/'\r\n    tasksUrl = this.rootUrl + '/tasks/'\r\n    tasksDoneUrl = this.rootUrl + '/tasks/done/'\r\n    tasksTodoUrl = this.rootUrl + '/tasks/todo/'\r\n    logOutUrl = this.rootUrl + '/logout/'\r\n    acceptedTokenLength = 15\r\n\r\n    httpOptions = {\r\n      headers: new HttpHeaders({ 'Content-Type': 'application/json'})\r\n    }\r\n\r\n    token:string = \"\"\r\n    userLogged:boolean = false\r\n\r\n    tokenNotFoundMessage = \"Cannot connect to server.\"\r\n\r\n    appState$:Observable<any>\r\n\r\n    constructor(private store: Store<{appState:AppState}>) {\r\n      this.appState$ = store.select('appState')\r\n      this.appState$.subscribe(app => this.setState(app))\r\n    }\r\n\r\n    private setState(state:AppState):void {\r\n      this.token = state.token\r\n      this.userLogged = this.userLogged\r\n  }\r\n\r\n    addServerManagementMessage(message:string, status:boolean, statusCode:number){\r\n      var serverMessage:ServerMessage = {message:message, messageStatusCode:statusCode, messageStatus:status}\r\n      this.store.dispatch(addServerMessage({message:serverMessage}))\r\n    }\r\n\r\n    cardToTaskConverter(card:Card):Task {\r\n      var task:Task = {id:card.id,name:card.taskName, description:card.description, done:card.done}\r\n      return task\r\n    }\r\n\r\n    taskToCardConverter(task:Task):Card {\r\n      var card:Card = {id:task.id, taskName:task.name, description:task.description, done:task.done,\r\n        message:\"\",messageShow:false, editMode:true, folded:false}\r\n      return card\r\n    }\r\n\r\n    taskListToCardConverter(tasks:Task[]):Card[] {\r\n      var cards:Card[] = []\r\n      for(var i=0; i<tasks.length; i++) {\r\n        var card:Card = {\r\n          id:tasks[i].id,\r\n          taskName:tasks[i].name,\r\n          description:tasks[i].description,\r\n          done:tasks[i].done,\r\n          message:\"\",\r\n          messageShow:false,\r\n          editMode:false,\r\n          folded:true}\r\n          \r\n          cards.push(card)\r\n      }\r\n      return cards\r\n    }\r\n    \r\n    handleHttpError(error: HttpErrorResponse) {\r\n      return new Observable(observer => {\r\n        if (error.error instanceof ErrorEvent) {\r\n          //general error\r\n          this.addServerManagementMessage(error.error.message,false,error.status);\r\n        } else {\r\n          //backend error\r\n          var errorValue:string = error.error.value\r\n          var errorStatus:number = error.status\r\n          this.addServerManagementMessage(errorValue,false ,errorStatus)\r\n        }\r\n        observer.next(null)\r\n    })\r\n  }\r\n\r\n  convertTasks(tasks:Task[]){\r\n    return this.taskListToCardConverter(tasks)\r\n  }\r\n\r\n  tokenReceived(): boolean {\r\n    if(this.token != null){\r\n      if(this.token.length==this.acceptedTokenLength) {\r\n        return true\r\n      }      \r\n    }\r\n    return false\r\n  }\r\n\r\n  checkTokenLength(token:string): boolean {\r\n    if(token != null){\r\n      if(token.length == this.acceptedTokenLength) {\r\n        return true\r\n      }      \r\n    }\r\n    return false\r\n  }\r\n}","import { HttpClient, HttpHeaders, HttpResponse } from \"@angular/common/http\";\r\nimport { Injectable } from \"@angular/core\";\r\nimport { Store } from \"@ngrx/store\";\r\nimport { Observable } from \"rxjs\";\r\nimport { catchError } from \"rxjs/operators\";\r\nimport { AppState } from \"../../store/AppState\";\r\nimport { ServerMessage } from \"../../models/server-message\";\r\nimport { ServicesSettingsAndTools } from \"../../services.settings.tools\";\r\nimport { addServerMessage, setToken } from \"../../store/store-actions\";\r\nimport { StringDto } from \"../../models/string-dto\";\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class TokenService {\r\n\r\n    token:string = \"\"\r\n\r\n    appState$:Observable<any>\r\n\r\n    constructor(private http:HttpClient,\r\n       private store:Store<{appState:AppState}>,\r\n       private serviceSettings:ServicesSettingsAndTools) {\r\n        this.appState$ = store.select('appState')\r\n        this.appState$.subscribe(app => this.token = app.token)\r\n    }\r\n\r\n    getToken(): void {\r\n      console.log(\"get token called\")\r\n        this.addServerManagementMessage(\"Connecting to server...\", true, 0)\r\n        this.http.get<StringDto>(this.serviceSettings.tokenUrl, {observe:'response'})\r\n        .pipe(catchError(error => this.serviceSettings.handleHttpError(error)))\r\n        .subscribe(token => this.setToken(token))\r\n    }\r\n\r\n    private setToken(response:any):void {\r\n      if(response != null){\r\n        var status = response.status\r\n        if(response.body != null){\r\n          if(status==200){\r\n            if(response.body?.value != null){\r\n              if(this.serviceSettings.checkTokenLength(response.body.value)){\r\n                this.addServerManagementMessage(\"Connected\", true,0)\r\n                this.store.dispatch(setToken({token:response.body.value}))\r\n                return\r\n              }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n    private addServerManagementMessage(message:string, status:boolean, statusCode:number){\r\n        var serverMessage:ServerMessage = {message:message, messageStatusCode:statusCode, messageStatus:status}\r\n        this.store.dispatch(addServerMessage({message:serverMessage}))\r\n      }\r\n}","export enum TaskListStatus {\r\n    ALL, DONE, TODO\r\n}","import { Component, OnInit } from '@angular/core';\nimport { Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { AppState } from '../store/AppState';\nimport { FormPanelMode } from '../models/form-panel-mode';\nimport { setFormPanelMode } from '../store/store-actions';\nimport { UserCredentials } from '../models/user-credentials';\nimport { LoginService } from '../services/user_services/login.service';\nimport { LogOutService } from '../services/user_services/logOut.service';\nimport { RegistrationService } from '../services/user_services/registration.service';\n\n@Component({\n  selector: 'app-form-panel',\n  templateUrl: './form-panel.component.html',\n  styleUrls: ['./form-panel.component.css']\n})\nexport class FormPanelComponent implements OnInit {\n\n  email:string = \"\"\n  password:string = \"\"\n  formVisibility!:boolean\n\n  logInButton!:boolean\n  signUpButton!:boolean\n\n  panelVisible!:boolean\n  message!:string\n\n  appState$:Observable<any>\n\n  constructor(private store:Store<{appState:AppState}>,\n    private logInService:LoginService,\n    private registrationService:RegistrationService) {\n    this.appState$ = store.select('appState')\n    this.appState$.subscribe(app => this.setStates(app))\n  }\n\n  ngOnInit(): void {\n  }\n\n  setStates(appState:AppState){\n    switch(appState.formPanelMode){\n      case FormPanelMode.LOG_IN:\n        this.clearForm()\n        this.logInButton = true\n        this.signUpButton = false\n        this.formVisibility = true\n        break;\n      case FormPanelMode.SIGN_IN:\n        this.clearForm()\n        this.logInButton = false\n        this.signUpButton = true\n        this.formVisibility = true\n        break;\n      case FormPanelMode.NOT_VISIBLE:\n        this.clearForm()\n        this.formVisibility = false\n        break;\n    }\n  }\n\n  logIn() {\n    var credentials:UserCredentials = {userEmail:this.email, userPassword:this.password}\n    this.logInService.loginUser(credentials)\n    this.clearForm()\n  }\n\n  signUp() {\n    var credentials:UserCredentials = {userEmail:this.email, userPassword:this.password}\n    this.registrationService.registerUser(credentials)\n    this.clearForm()\n  }\n\n  cancel() {\n    this.clearForm()\n    this.store.dispatch(setFormPanelMode({mode:FormPanelMode.NOT_VISIBLE}))\n  }\n\n  private clearForm(){\n    this.email = \"\"\n    this.password = \"\"\n  }\n}\n","<div *ngIf=\"formVisibility\" class=\"card m-3 shadow\">\n    <div class=\"card-body\">\n        <div>\n            <div class=\"mb-3\">\n                <label for=\"exampleInputEmail1\" class=\"form-label\">Email address</label>\n                <input type=\"email\" class=\"form-control\" id=\"exampleInputEmail1\" aria-describedby=\"emailHelp\" [(ngModel)]=\"email\">\n                <div id=\"emailHelp\" class=\"form-text\">We'll never share your email with anyone else.</div>\n            </div>\n            <div class=\"mb-3\">\n                <label for=\"exampleInputPassword1\" class=\"form-label\">Password</label>\n                <input type=\"password\" class=\"form-control\" id=\"exampleInputPassword1\" [(ngModel)]=\"password\">\n            </div>\n        </div>\n        <button type=\"button\" *ngIf=\"logInButton\" (click)=\"logIn()\" class=\"btn btn-primary m-2\">Log In</button>\n        <button type=\"button\" *ngIf=\"signUpButton\" (click)=\"signUp()\" class=\"btn btn-primary m-2\">Sign Up</button>\n        <button type=\"button\" (click)=\"cancel()\" class=\"btn btn-primary m-2\">Cancel</button>\n    </div>\n</div>\n","import { HttpClient, HttpResponse } from \"@angular/common/http\"\r\nimport { Injectable } from \"@angular/core\"\r\nimport { Store } from \"@ngrx/store\"\r\nimport { Observable } from \"rxjs\"\r\nimport { catchError } from \"rxjs/operators\"\r\nimport { AppState } from \"../../store/AppState\"\r\nimport { ServicesSettingsAndTools } from \"../../services.settings.tools\"\r\nimport { addServerMessage, createMultipleCards, setToken, setTopBarMessage, setUserLoggedToFalse } from \"../../store/store-actions\"\r\nimport { StringDto } from \"../../models/string-dto\"\r\nimport { TokenService } from \"./token.service\"\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class LogOutService {\r\n    token:string = \"\"\r\n    userLogged:boolean = false\r\n\r\n    appState$:Observable<any>\r\n\r\n    constructor(private store: Store<{appState:AppState}>,\r\n      private http:HttpClient,\r\n      private serviceSettings:ServicesSettingsAndTools,\r\n      private tokenService:TokenService) {\r\n        this.appState$ = store.select('appState')\r\n        this.appState$.subscribe(app => this.setState(app))\r\n    }\r\n\r\n    private setState(state:AppState):void {\r\n        this.token = state.token\r\n        this.userLogged = this.userLogged\r\n    }\r\n\r\n    logoutUser():void {\r\n      this.addMessage(\"Logging out user...\",true,0)\r\n      if(this.serviceSettings.tokenReceived()){\r\n        this.http.get<StringDto>(this.serviceSettings.logOutUrl + this.token, {observe:'response'})\r\n        .pipe(catchError(error => this.serviceSettings.handleHttpError(error)))\r\n        .subscribe(\r\n          response => {\r\n            this.analyzeLogoutResponse(response)\r\n          }\r\n        )\r\n      } else {\r\n        var message = 'Token not found.'\r\n        this.addMessage(this.serviceSettings.tokenNotFoundMessage,false,0)\r\n      }\r\n    }\r\n    \r\n    private analyzeLogoutResponse(response:any):void {\r\n      if(response != null){\r\n        var status = response.status\r\n        if(response.body != null){\r\n          var message:string = response.body.value\r\n          if(status==202){\r\n            this.executeLogOutOperations(message, status)\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    private executeLogOutOperations(message:string, status:number){\r\n      this.addMessage(message,true,status)\r\n      this.store.dispatch(setUserLoggedToFalse())\r\n      this.store.dispatch(setToken({token:\"\"}))\r\n      this.store.dispatch(setTopBarMessage({message:\"ToDo App\"}))\r\n      this.store.dispatch(createMultipleCards({cards:[]}))\r\n      this.tokenService.getToken()\r\n    }\r\n\r\n    private addMessage(message:string, status:boolean, statusCode:number){\r\n      this.serviceSettings.addServerManagementMessage(message, status, statusCode)\r\n    }\r\n}","import { enableProdMode } from '@angular/core';\r\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\r\n\r\nimport { AppModule } from './app/app.module';\r\nimport { environment } from './environments/environment';\r\n\r\nif (environment.production) {\r\n  enableProdMode();\r\n}\r\n\r\nplatformBrowserDynamic().bootstrapModule(AppModule)\r\n  .catch(err => console.error(err));\r\n","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"zn8P\";"],"sourceRoot":"webpack:///"}